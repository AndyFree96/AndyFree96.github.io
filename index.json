[{"categories":["JavaScript"],"content":"在使用 JavaScript 编程时，我们会经常用到数组对象，本文我们就来盘点一下那些好用的数组方法吧！😁 我们先创建两个数组： const a = ['JavaScript', 'Php', 'Python', 'Ruby', 'C++', 'Node.js', 'Java', 'C++']; const b = [1, 3, 8, 16, 32, 48, 5]; ","date":"2024-02-27","objectID":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/:0:0","tags":["Array","JavaScript"],"title":"那些好用的JavaScript数组方法","uri":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"},{"categories":["JavaScript"],"content":"\revery()首先，我们想知道数组a中的所有元素长度都是大于 4 的吗？对于这个数组的而言，结果是显然的。我们可以用如下的for循环得到问题的答案， let result = true; for (let i = 0; i \u003c a.length; i++\u003e){ if (a[i].length \u003c= 4){ result = false; break } } console.log(result); 结果如下： 但用for循环的方式多少显得有些麻烦，我们可以更加简洁地得到结果，那就是使用every()方法。 a.every(word =\u003e word.length \u003e 4); 通过传入一个箭头函数，就将问题解决啦，而且代码变得简洁清晰多了 😉。 ","date":"2024-02-27","objectID":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/:1:0","tags":["Array","JavaScript"],"title":"那些好用的JavaScript数组方法","uri":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"},{"categories":["JavaScript"],"content":"\rsome()接下来，我们想知道数组b中是否有大于 10 的元素呢？看起来这问题似乎有点傻，但…… 如果数组b中有 1 万个元素呢？ 我们同样可以使用for循环得到问题的答案： let result = false; for (let i = 0; i \u003c b.length; i++){ if (b[i] \u003e 10){ result = true; break; } } console.log(result); 我们还可以用some()方法， b.some(elem =\u003e elem \u003e 10); 如上所示，我们总是可以通过every()方法检测数组中所有元素都满足某种要求，而通过some()方法检测数组中是否有某个元素满足某种要求。 ","date":"2024-02-27","objectID":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/:2:0","tags":["Array","JavaScript"],"title":"那些好用的JavaScript数组方法","uri":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"},{"categories":["JavaScript"],"content":"\rfilter()我们已经知道数组a中并不是所有元素的长度都是大于 4 的，那么具体是哪些元素的长度大于 4 呢？有没有什么办法可以把它们都找到呢？ 老规矩，我们依旧可以用for循环。 let words = []; for (let i = 0; i \u003c a.length; i++){ if (a[i].length \u003e 4){ words.push(a[i]); } } console.log(words); 但我们还是推荐更加简短的filter()方法， a.filter(word =\u003e word.length \u003e 4); 结果如下： ","date":"2024-02-27","objectID":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/:3:0","tags":["Array","JavaScript"],"title":"那些好用的JavaScript数组方法","uri":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"},{"categories":["JavaScript"],"content":"\rmap()接下来，我们来做另外一件事，那就是给数组a中的每个元素后追加一个字符串“ is awesome!”，我们可以怎么做呢？——用map()方法。 a.map(word =\u003e word + \" is awesome!\"); ","date":"2024-02-27","objectID":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/:4:0","tags":["Array","JavaScript"],"title":"那些好用的JavaScript数组方法","uri":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"},{"categories":["JavaScript"],"content":"\rforEach()如果我们想将数组a中长度大于 4 的元素每每追加一个字符串“ is awesome!”并依次打印输出怎么做？ 首先我们可以用filter()方法进行筛选，然后用map()方法进行追加，最后用forEach()方法进行迭代打印输出。 a.filter(word =\u003e word.length \u003e 4).map(word =\u003e word + \" is awesome!\").forEach(word =\u003e console.log(word)); 现在你可能发现了map()和filter()方法返回一个数组的好处了吧！😋 ","date":"2024-02-27","objectID":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/:5:0","tags":["Array","JavaScript"],"title":"那些好用的JavaScript数组方法","uri":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"},{"categories":["JavaScript"],"content":"\rreduce()如果想将数组b进行求和运算该怎么做呢？——用reduce()方法。 reduce()方法的原型如下： array.reduce(reducer [, initialValue]) reducer为一个回调函数，以及可选初始化参数initialValue。reduce()方法会在每个数组元素上调用reducer()函数，reducer()函数返回一个累积的值，这个值在下一次调用reducer()函数时作为参数传入。 reducer()函数的原型如下： function reducer(accumulator, currentValue, currentIndex, array){} 回到给数组b进行求和的问题，代码如下： b.reduce((accu, curr) =\u003e accu + curr); ","date":"2024-02-27","objectID":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/:6:0","tags":["Array","JavaScript"],"title":"那些好用的JavaScript数组方法","uri":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"},{"categories":["JavaScript"],"content":"\rincludes()假如我们想知道数组中是否包含某个元素怎么整？比如，数组a包含Julia吗？ 当然，我们可以用之前学到过的some()方法， a.some(word =\u003e word === 'Julia'); 但还是推荐使用includes()方法： a.includes('Julia'); 无它，简明而已！ ","date":"2024-02-27","objectID":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/:7:0","tags":["Array","JavaScript"],"title":"那些好用的JavaScript数组方法","uri":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"},{"categories":["JavaScript"],"content":"\rfind()filter()可以帮我们找到数组b中所有大于 8 的元素，但有时候我们要的不是所有，而是第一个。此时我们可以用find()方法。 b.find(elem =\u003e elem \u003e 8); ","date":"2024-02-27","objectID":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/:8:0","tags":["Array","JavaScript"],"title":"那些好用的JavaScript数组方法","uri":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"},{"categories":["JavaScript"],"content":"\rfindIndex()如果你对第一个元素（详见find()方法）不感兴趣，而是迫切想知道满足某条件的第一个元素的下标，那么可以用findIndex()方法。 b.findIndex(elem =\u003e elem \u003e 8); ","date":"2024-02-27","objectID":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/:9:0","tags":["Array","JavaScript"],"title":"那些好用的JavaScript数组方法","uri":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"},{"categories":["JavaScript"],"content":"\r总结本文介绍了 9 个能让我们代码更加简洁的数组方法，分别是every()，some()，filter()，map()，forEach()，reduce()，includes()，find()和findIndex()，希望能让给你带来一点启发。 ","date":"2024-02-27","objectID":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/:10:0","tags":["Array","JavaScript"],"title":"那些好用的JavaScript数组方法","uri":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"},{"categories":["JavaScript"],"content":"\r推荐最后，推荐几个网站！ JavaScript Tutorial: https://www.javascripttutorial.net/ MDN Web Docs: https://developer.mozilla.org/en-US/ 感兴趣的同学可以去瞅瞅 😍。 ","date":"2024-02-27","objectID":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/:11:0","tags":["Array","JavaScript"],"title":"那些好用的JavaScript数组方法","uri":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"},{"categories":["JavaScript"],"content":"\r参考https://www.w3schools.com/jsref/jsref_obj_array.asp ","date":"2024-02-27","objectID":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/:12:0","tags":["Array","JavaScript"],"title":"那些好用的JavaScript数组方法","uri":"/%E9%82%A3%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84javascript%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"},{"categories":null,"content":"\r项目json-tutorial: 从零开始的 JSON 库教程 http-parser: http request/response parser for c mongoose: Embedded Web Server xgboost: Scalable, Portable and Distributed Gradient Boosting (GBDT, GBRT or GBM) Library, for Python, R, Java, Scala, C++ and more. Runs on single machine, Hadoop, Spark, Dask, Flink and DataFlow darknet: Convolutional Neural Networks ","date":"2024-02-26","objectID":"/resource/:1:0","tags":null,"title":"资源","uri":"/resource/"},{"categories":null,"content":"\r2024Stanford CS107 Programming Paradigms 编程范式 清华大学 操作系统 清华大学 经济学原理 耶鲁大学 聆听音乐 Machine Learning 2022 Spring Deep Learning for Human Language Processing 2020 Spring 6.824 Schedule: Spring 2022 ","date":"2024-02-25","objectID":"/opencourse/:1:0","tags":null,"title":"公开课","uri":"/opencourse/"},{"categories":null,"content":"\r2024","date":"2024-02-25","objectID":"/book/:1:0","tags":null,"title":"书单","uri":"/book/"},{"categories":null,"content":"\r计算机JavaScript 高级程序设计 第 4 版 Unix\u0026Linux 大学教程 学习 JavaScript 数据结构与算法 第 3 版 Hands-on Machine Learning with Scikit-Learn, Keras \u0026 TensorFlow 2nd Edition 编写可读代码的艺术 ","date":"2024-02-25","objectID":"/book/:1:1","tags":null,"title":"书单","uri":"/book/"},{"categories":null,"content":"\r文学红楼梦 金瓶梅 ","date":"2024-02-25","objectID":"/book/:1:2","tags":null,"title":"书单","uri":"/book/"},{"categories":null,"content":"\r传记王安石传 毛泽东传 ","date":"2024-02-25","objectID":"/book/:1:3","tags":null,"title":"书单","uri":"/book/"},{"categories":null,"content":"\r经济经济学原理 ","date":"2024-02-25","objectID":"/book/:1:4","tags":null,"title":"书单","uri":"/book/"},{"categories":null,"content":"\r饮食一日一果 ","date":"2024-02-25","objectID":"/book/:1:5","tags":null,"title":"书单","uri":"/book/"},{"categories":null,"content":"\r写作文心 ","date":"2024-02-25","objectID":"/book/:1:6","tags":null,"title":"书单","uri":"/book/"},{"categories":null,"content":"\r哲学哲学家们都干了些什么 苏菲的世界 理想国 ","date":"2024-02-25","objectID":"/book/:1:7","tags":null,"title":"书单","uri":"/book/"},{"categories":null,"content":"\r政治政治学通识 ","date":"2024-02-25","objectID":"/book/:1:8","tags":null,"title":"书单","uri":"/book/"},{"categories":null,"content":"\r电影认识电影 ","date":"2024-02-25","objectID":"/book/:1:9","tags":null,"title":"书单","uri":"/book/"},{"categories":null,"content":"\r历史明朝那些事儿 万历十五年 ","date":"2024-02-25","objectID":"/book/:1:10","tags":null,"title":"书单","uri":"/book/"},{"categories":null,"content":"\r2024 # 标题 年份 论文 代码 状态 1 You Only Look Once: Unified, Real-Time Object Detection 2015 Link Link ❎ 2 YOLOv4: Optimal Speed and Accuracy of Object Detection 2020 Link Link ❎ 3 A Neural Algorithm of Artistic Style 2015 Link Link ❎ ","date":"2024-02-25","objectID":"/paper/:1:0","tags":null,"title":"论文","uri":"/paper/"},{"categories":null,"content":"\r简介一个热爱学习的东尼君 ","date":"2024-02-25","objectID":"/about/:1:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":"\r其他稀土掘金: AndyFree96 CSDN: AndyFree96 CodenPen: IRONAnthony CodeSandBox: AndyFree96 ","date":"2024-02-25","objectID":"/about/:2:0","tags":null,"title":"关于","uri":"/about/"},{"categories":["JavaScript"],"content":"Axios是一个基于 Promise 的 HTTP 客户端，我们可以在浏览器和 Node.js 中使用它。Axios 使向 REST 端点发送异步 HTTP 请求和执行 CRUD 操作变得更加容易。它可以在纯 JavaScript 中使用，也可以在 Vue 或者 React 之类的库中使用。 先看一个在浏览器中使用 Axios 的例子，我们发送一个请求到https://api.github.com/users/USERNAME，以获取到用户的一些信息。 新建一个名为 1.html 的文件，代码如下： \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e\u003c/head\u003e \u003ctitle\u003eAxios\u003c/title\u003e \u003cbody\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\"\u003e\u003c/script\u003e \u003cscript src=\"main.js\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e main.js 代码如下： axios.get(\"https://api.github.com/users/andyfree96\").then(response =\u003e { console.log(response.data); }).catch(error =\u003e { console.log(\"ERROR!\"); }); 启动服务器， 如果您没有安装http-server的话，请自行安装一下。 打开浏览器，就可以看到： 成功获取到用户信息。 之后的教程将在 Node.js 中使用 Axios，而不是在浏览器。 ","date":"2024-02-24","objectID":"/axios%E6%95%99%E7%A8%8B/:0:0","tags":["JavaScript","Axios"],"title":"Axios教程","uri":"/axios%E6%95%99%E7%A8%8B/"},{"categories":["JavaScript"],"content":"\r安装 Axios本文使用的 Node.js 版本是： 初始化一个 Node.js 应用， npm init -y 在命令行中输入npm i axios安装即可。 ","date":"2024-02-24","objectID":"/axios%E6%95%99%E7%A8%8B/:1:0","tags":["JavaScript","Axios"],"title":"Axios教程","uri":"/axios%E6%95%99%E7%A8%8B/"},{"categories":["JavaScript"],"content":"\rAxios 的响应对象当我们发送一个请求给服务器后，它会返回一个响应。Axios 的响应对象包含如下内容： data - 服务器返回的响应主体数据 status - 服务器返回的响应状态码 statusText - 返回的状态信息 headers - 返回的头部信息 config - 请求的配置信息 request - 请求对象 ","date":"2024-02-24","objectID":"/axios%E6%95%99%E7%A8%8B/:2:0","tags":["JavaScript","Axios"],"title":"Axios教程","uri":"/axios%E6%95%99%E7%A8%8B/"},{"categories":["JavaScript"],"content":"\rAxios 的 GET 请求我们以回调函数或者 async/await 的方式发送 Get 请求。 回调函数： const axios = require(\"axios\"); axios.get(\"https://api.github.com/users/andyfree96\").then((response) =\u003e { console.log(response.status); console.log(response.statusText); console.log(response.data); }); 结果如下： async/await： const axios = require(\"axios\"); async function makeGetRequest() { let response = await axios.get(\"https://httpbin.org/get\"); let data = response.data; console.log(data); console.log(response.request._header); } makeGetRequest(); 结果如下： ","date":"2024-02-24","objectID":"/axios%E6%95%99%E7%A8%8B/:3:0","tags":["JavaScript","Axios"],"title":"Axios教程","uri":"/axios%E6%95%99%E7%A8%8B/"},{"categories":["JavaScript"],"content":"\rAxios 的 HEAD 请求HEAD 请求是一个没有消息体的 GET 请求。 const axios = require(\"axios\"); async function makeHeadRequest() { let response = await axios.head(\"http://www.baidu.com\"); console.log(`status: ${response.status}`); console.log(`server : ${response.headers.server}`); console.log(response.headers); } makeHeadRequest(); Axios 有两个基本的 API： axios(config) axios(url, config) const axios = require(\"axios\"); async function makeRequest() { const config = { method: \"get\", }; const url = \"http://httpbin.org/get\"; let response = await axios(url, config); console.log(response.data); } makeRequest(); ","date":"2024-02-24","objectID":"/axios%E6%95%99%E7%A8%8B/:4:0","tags":["JavaScript","Axios"],"title":"Axios教程","uri":"/axios%E6%95%99%E7%A8%8B/"},{"categories":["JavaScript"],"content":"\rAxios 自定义头部 const axios = require(\"axios\"); async function makeRequest() { const config = { method: \"get\", url: \"http://www.baidu.com\", headers: { \"User-Agent\": \"5.js\" }, }; let response = await axios(config); console.log(response.request._header); } makeRequest(); 这里我们自定义了一个请求头部： const config = { method: \"get\", url: \"http://www.baidu.com\", headers: { \"User-Agent\": \"5.js\" }, }; ","date":"2024-02-24","objectID":"/axios%E6%95%99%E7%A8%8B/:5:0","tags":["JavaScript","Axios"],"title":"Axios教程","uri":"/axios%E6%95%99%E7%A8%8B/"},{"categories":["JavaScript"],"content":"\rAxios 的 POST 请求 const axios = require(\"axios\"); async function makePostRequest() { let response = await axios.post(\"https://httpbin.org/post\"); console.log(response.data); } makePostRequest(); ","date":"2024-02-24","objectID":"/axios%E6%95%99%E7%A8%8B/:6:0","tags":["JavaScript","Axios"],"title":"Axios教程","uri":"/axios%E6%95%99%E7%A8%8B/"},{"categories":["JavaScript"],"content":"\r下载图片 const axios = require(\"axios\"); const fs = require(\"fs\"); async function getImage(url) { const config = { responseType: \"stream\", }; let response = await axios.get(url, config); response.data.pipe(fs.createWriteStream(\"./image.png\")); } getImage( \"https://himg.bdimg.com/sys/portraitn/item/856f6c656f73636f74743936f939\" ); 我们在 config 对象中指明返回类型。 ","date":"2024-02-24","objectID":"/axios%E6%95%99%E7%A8%8B/:7:0","tags":["JavaScript","Axios"],"title":"Axios教程","uri":"/axios%E6%95%99%E7%A8%8B/"},{"categories":["JavaScript"],"content":"\r多个请求我们可以用 Axios 一次性创建多个请求。 const axios = require(\"axios\"); async function makeRequests() { let [response1, response2] = await Promise.all([ axios.get(\"https://api.github.com/users/andyfree96\"), axios.get(\"https://api.github.com/users/google\"), ]); console.log(response1.data.created_at); console.log(response2.data.created_at); } makeRequests(); ","date":"2024-02-24","objectID":"/axios%E6%95%99%E7%A8%8B/:8:0","tags":["JavaScript","Axios"],"title":"Axios教程","uri":"/axios%E6%95%99%E7%A8%8B/"},{"categories":["JavaScript"],"content":"\rJSON ServerJSON Server 是一个很棒的工具，可以让我们轻松地伪造 REST API。 我们先安装json-server: npm i -g json-server 创建一个名为 employees.json 的文件，添加如下内容： { \"employees\": [ { \"id\": 1, \"first_name\": \"Sebastian\", \"last_name\": \"Eschweiler\", \"email\": \"sebastian@codingthesmartway.com\" }, { \"id\": 2, \"first_name\": \"Steve\", \"last_name\": \"Palmer\", \"email\": \"steve@codingthesmartway.com\" }, { \"id\": 3, \"first_name\": \"Ann\", \"last_name\": \"Smith\", \"email\": \"ann@codingthesmartway.com\" } ] } 关于 JSON Server 创建 REST API 可以看下文。 Create A REST API With JSON Server: https://medium.com/codingthesmartway-com-blog/create-a-rest-api-with-json-server-36da8680136d 接下来我们可以启动 JSON Server， json-server --watch employees.json 访问http://localhost:3000/employees可以看到： 接下来我们可以使用 Axios 添加员工， const axios = require(\"axios\"); async function makePostRequest() { const params = { id: 4, first_name: \"Andy\", last_name: \"Scott\", email: \"andyfree96@126.com\", }; let response = await axios.post(\"http://localhost:3000/employees/\", params); console.log(response.data); } makePostRequest(); 获取员工, const axios = require(\"axios\"); async function makeRequest() { let response = await axios.get(\"http://localhost:3000/employees\"); console.log(response.data); } makeRequest(); 删除员工, const axios = require(\"axios\"); async function makeDeleteRequest() { let response = axios.delete(\"http://localhost:3000/employees/4/\"); console.log(response.data); } makeDeleteRequest(); ","date":"2024-02-24","objectID":"/axios%E6%95%99%E7%A8%8B/:9:0","tags":["JavaScript","Axios"],"title":"Axios教程","uri":"/axios%E6%95%99%E7%A8%8B/"},{"categories":["JavaScript"],"content":"\r参考Axios tutorial: http://zetcode.com/javascript/axios/ ","date":"2024-02-24","objectID":"/axios%E6%95%99%E7%A8%8B/:10:0","tags":["JavaScript","Axios"],"title":"Axios教程","uri":"/axios%E6%95%99%E7%A8%8B/"}]