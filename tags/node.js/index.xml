<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js - 标签 - 东尼的博客</title>
    <link>http://localhost:1313/tags/node.js/</link>
    <description>安东尼的博客，分享生活中的一些有意思的事儿！</description>
    <generator>Hugo 0.148.2 &amp; FixIt v0.3.20</generator>
    <language>zh-CN</language>
    <managingEditor>anthonyfree96@gmail.com (AndyFree96)</managingEditor>
    <webMaster>anthonyfree96@gmail.com (AndyFree96)</webMaster>
    <lastBuildDate>Thu, 11 Sep 2025 22:39:22 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/node.js/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>launch-editor源码剖析：快速打开编辑器的实现原理</title>
      <link>http://localhost:1313/launch-editor%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 11 Sep 2025 22:39:22 +0800</pubDate><author>anthonyfree96@gmail.com (AndyFree96)</author>
      <guid>http://localhost:1313/launch-editor%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <category domain="http://localhost:1313/categories/%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/">源码剖析</category>
      <description>&lt;p&gt;在阅读 Vite 源码的过程中，我注意到一个有趣的依赖 —— launch-editor。起初只是随手点开，结果却发现它正是支撑起「浏览器报错信息 → 一键跳转到编辑器」这一开发体验的核心工具。其实，我们在使用 Vite、Vue CLI 等工具的时候，不止一次用过这个功能：报错时点击链接，代码编辑器立刻打开到对应的文件和行号。背后的关键实现，正是 launch-editor。&lt;/p&gt;</description>
    </item>
    <item>
      <title>json-server源码剖析：快速构建REST API背后的原理</title>
      <link>http://localhost:1313/json-server%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 31 Jul 2025 16:47:36 +0800</pubDate><author>anthonyfree96@gmail.com (AndyFree96)</author>
      <guid>http://localhost:1313/json-server%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <category domain="http://localhost:1313/categories/%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/">源码剖析</category>
      <description>&lt;p&gt;在前端开发中，构建一套完整的后端接口往往耗时费力，而 &lt;a href=&#34;https://github.com/typicode/json-server&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;json-server&lt;/a&gt;正是为了解决这一痛点而生。只需一个 JSON 文件，它就能快速生成一个 REST API 服务，被广泛用于前端开发、原型验证、接口测试等场景。本文将深入剖析 &lt;a href=&#34;https://github.com/typicode/json-server&#34;target=&#34;_blank&#34; rel=&#34;external nofollow noopener noreferrer&#34;&gt;json-server&lt;/a&gt;的源码，一起理解它是如何工作的，并从中学习一些开发技巧。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Node.js 源码剖析：非阻塞世界的引擎密码</title>
      <link>http://localhost:1313/node.js%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</link>
      <pubDate>Thu, 27 Jun 2024 11:33:50 +0800</pubDate><author>anthonyfree96@gmail.com (AndyFree96)</author>
      <guid>http://localhost:1313/node.js%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/</guid>
      <category domain="http://localhost:1313/categories/%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/">源码剖析</category>
      <description>&lt;p&gt;Node.js 的诞生，让 JavaScript 从浏览器的专属语言，跃升为构建高性能服务器的利器。凭借事件驱动的架构和非阻塞 I/O 特性，Node.js 成为现代网络应用开发中的重要基石。然而，当你写下 &lt;code&gt;http.createServer&lt;/code&gt;时，是否好奇过这些简单的 API 背后究竟发生了什么？&lt;/p&gt;&#xA;&lt;p&gt;本篇文章将带你深入 Node.js 的源码世界，揭开其核心模块、事件循环、异步模型和底层实现的神秘面纱。从 libuv 的非阻塞 I/O，到 V8 引擎对 JavaScript 的极速解析，我们将从代码的视角探索 Node.js 是如何在性能与灵活性之间找到绝佳平衡的。&lt;/p&gt;&#xA;&lt;p&gt;无论你是想提升对 Node.js 的理解，还是希望从源码中汲取工程设计的智慧，这都将是一次充满收获的技术旅程。准备好了吗？让我们从入口文件开始，走进 Node.js 的源码迷宫！&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
